import { EventBus } from "../EventBus";
import { Scene } from "phaser";

const TILE_WIDTH = 256;
const TILE_HEIGHT = 128;

export class Game extends Scene {
    camera: Phaser.Cameras.Scene2D.Camera;
    background: Phaser.GameObjects.Image;
    tileOutline: Phaser.GameObjects.Image;

    constructor() {
        super("Game");
    }

    create() {
        this.camera = this.cameras.main;
        this.camera.setZoom(0.3);
        this.camera.centerOn(0, 0);

        this.drawTiles();
        this.tileOutline = this.add.image(0, 0, "tile-outline");
        EventBus.emit("current-scene-ready", this);
    }

    drawTiles() {
        const xStartPoint = 0;
        const yStartPoint = 0;

        // full map generated by server? Store and use JSON
        this.add.image(0, 0, "base_tiles");

        // for (let x = 0; x < this.xTiles; x++) {
        //     for (let y = 0; y < this.yTiles; y++) {
        //         // this.add.image(
        //         //     xStartPoint + this.plotSize,
        //         //     yStartPoint + this.plotSize,
        //         //     "base_tiles"
        //         // ).setOrigin(0, 0);
        //     }
        // }
    }

    update() {
        // CAMERA CONTROLS
        // const scrollDelta = this.input.activePointer.deltaY;
        // this.camera.zoom += scrollDelta * -0.0001;
        // this.camera.zoom = Phaser.Math.Clamp(this.camera.zoom, 0.25, 0.75);

        const sensitivity = 0.001; // Adjust sensitivity as needed

        this.input.on(
            "wheel",
            (
                _pointer: any,
                _gameObjects: any,
                _deltaX: any,
                deltaY: number,
                _deltaZ: any
            ) => {
                const zoomChange = Math.sign(deltaY) * sensitivity;
                this.camera.zoom -= zoomChange;
                console.log(this.camera.zoom);
            }
        );

        // TODO: Limit to game canvas (not navbar)
        this.input.on(
            "pointerdown",
            (pointer: { isDown: any; x: any; y: any }) => {
                if (pointer.isDown) {
                    let initialX = pointer.x;
                    let initialY = pointer.y;

                    this.input.on(
                        "pointermove",
                        (pointer: { x: number; y: number }) => {
                            const deltaX = pointer.x - initialX;
                            const deltaY = pointer.y - initialY;

                            this.camera.scrollX -= deltaX * sensitivity;
                            this.camera.scrollY -= deltaY * sensitivity;

                            initialX = pointer.x;
                            initialY = pointer.y; // Reset initial position for continuous panning
                        }
                    );

                    this.input.on("pointerup", () => {
                        this.input.off("pointermove");
                    });
                }
            }
        );

        // TILE HIGHLIGHT
        const worldPoint = this.cameras.main.getWorldPoint(
            this.input.x,
            this.input.y
        );

        this.tileOutline.x = Phaser.Math.Snap.To(
            worldPoint.x,
            TILE_WIDTH - TILE_HEIGHT
        );
        this.tileOutline.y = Phaser.Math.Snap.To(
            worldPoint.y,
            (TILE_WIDTH + TILE_HEIGHT) / 2
        );
    }
}
